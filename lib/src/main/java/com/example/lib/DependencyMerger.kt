import java.io.File
import com.akuleshov7.ktoml.Toml
import com.akuleshov7.ktoml.TomlInputConfig
import kotlinx.serialization.Serializable

@Serializable
data class TomlConfig(
    val versions: Map<String, String> = emptyMap(),
    val libraries: Map<String, Map<String, Map<String, Map<String, Long>>>> = emptyMap(), // –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    val plugins: Map<String, Map<String, Map<String, Map<String, Long>>>> = emptyMap()
)


fun main(args: Array<String>) {
    try {
        val sourceFile =
            if (args.isNotEmpty()) File(args[0])
            else File("G:\\android\\Landing\\gradle\\libs.versions.toml")
        val targetFile = if (args.size > 1) File(args[1])
        else File("D:\\walhalla\\AE\\gradle\\libs.versions.toml")
        val targetFile1 = if (args.size > 1) File(args[1])
        else File("D:\\walhalla\\AE\\gradle\\libs.versions-2.toml")

        println("üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${sourceFile.absolutePath}")
        println("üìù –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: ${targetFile.absolutePath}")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if (!sourceFile.exists()) throw IllegalArgumentException("–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if (!targetFile.exists()) throw IllegalArgumentException("–¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!sourceFile.canRead()) throw SecurityException("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        if (!targetFile.canWrite()) throw SecurityException("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª")

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Toml —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        val toml = Toml(TomlInputConfig(ignoreUnknownNames = true))

        // –ß–∏—Ç–∞–µ–º TOML —Ñ–∞–π–ª—ã
        val sourceToml = try {
            toml.decodeFromString(
                TomlConfig.serializer(),
                sourceFile.readText()
            )
        } catch (e: Exception) {
            throw IllegalStateException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ TOML: ${e.message}")
        }

        val targetToml = try {
            toml.decodeFromString(
                TomlConfig.serializer(),
                targetFile.readText()
            )
        } catch (e: Exception) {
            throw IllegalStateException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ TOML: ${e.message}")
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ü–∏–∏ —Å –≤–µ—Ä—Å–∏—è–º–∏, –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ –∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏
        val sourceDeps = sourceToml.versions
        val targetDeps = targetToml.versions.toMutableMap()

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        var changed = false
        var addedCount = 0
        sourceDeps.forEach { (key, version1) ->
            if (key !in targetDeps) {
                targetDeps[key] = version1
                println("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: $key = $version1")
                changed = true
                addedCount++
            } else {
                // –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –≤–µ—Ä—Å–∏—é
                if (targetDeps[key] != version1) {


                    val result = compareTo(version1, targetDeps[key] ?: "")

                    println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: $key = $version1 ${targetDeps[key]} $result")
                    targetDeps[key] = version1
                    changed = true
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π TOML
        if (changed) {
            try {
                val tomlContent = buildString {
                    appendLine("[versions]")
                    targetDeps.forEach { (key, value) ->
                        appendLine("$key = \"$value\"")
                    }
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ libraries –∏ plugins
                    appendLine("[libraries]")
                    sourceToml.libraries.forEach { (libName, libConfig) ->
                        append("$libName = {")
                        val entries = libConfig.entries.toList()
                        entries.forEachIndexed { index, entry ->
                            if (entry.value is LinkedHashMap) {
                                var o = entry.key

                                entry.value.entries.forEachIndexed { innerIndex, innerEntry ->
                                    o += "." + innerEntry.key
                                    append(" $o = \"${innerEntry.value}\"${if ((innerIndex < entry.value.entries.size - 1) && index < entries.size - 1) "," else ","}")
                                }
                            } else {
                                append(" ${entry.key} = \"${entry.value}\"${if (index < entries.size - 1) "," else ""}")
                            }
                        }
                        append("}\n")
                    }
                    appendLine("[plugins]")
                    sourceToml.plugins.forEach { (libName, libConfig) ->
                        append("$libName = {")
                        val entries = libConfig.entries.toList()
                        entries.forEachIndexed { index, entry ->
                            if (entry.value is LinkedHashMap) {
                                var o = entry.key

                                entry.value.entries.forEachIndexed { innerIndex, innerEntry ->
                                    o += "." + innerEntry.key
                                    append(" $o = \"${innerEntry.value}\"${if ((innerIndex < entry.value.entries.size - 1) && index < entries.size - 1) "," else ","}")
                                }
                            } else {
                                append(" ${entry.key} = \"${entry.value}\"${if (index < entries.size - 1) "," else ""}")
                            }
                        }
                        append("}\n")
                    }
                }
                targetFile1.writeText(tomlContent)
                println("üéâ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–µ—Ä—Å–∏–π: $addedCount")
            } catch (e: Exception) {
                throw IllegalStateException("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ TOML: ${e.message}")
            }
        } else {
            println("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        }
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞: ${e.message}")
        System.exit(1)
    }
}

fun compareTo(version1: String, s: String): String {
    val result = version1.compareTo(s)

    return when {
        result < 0 -> {
            println("$version1 –º–µ–Ω—å—à–µ ${s}")
            s
        }

        result > 0 -> {
            println("$version1 –±–æ–ª—å—à–µ ${s}")
            version1
        }

        else -> {
            println("$version1 —Ä–∞–≤–Ω–æ ${s}")
            version1
        }
    }
}
